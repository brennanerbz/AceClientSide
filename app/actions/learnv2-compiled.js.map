{"version":3,"sources":["learnv2.js"],"names":[],"mappings":"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","file":"learnv2-compiled.js","sourcesContent":["import axios from 'axios';\nimport moment from 'moment'; \nimport request from 'superagent';\nconst api_url = 'http://127.0.0.1:5000/webapi/v2.0';\n\n/*\n@params: user_id, set_id, assignment_id, sequence_id\n@purpose: method that runs sequences and slots concurrently\n*/\nexport const REQUEST_LEARN = 'REQUEST_LEARN';\nexport const RECEIVE_LEARN_SUCCESS = 'RECEIVE_LEARN_SUCCESS';\nexport const RECEIVE_LEARN_FAILURE = 'RECEIVE_LEARN_FAILURE';\nexport function fetchLearn(user_id, set_id, assignment_id) {\n\treturn (dispatch, getState) => {\n\t\tdispatch(clearLearn())\n\t\tdispatch({type: REQUEST_LEARN})\n\t\ttry {\n\t\t\tdispatch(fetchSequence(user_id, set_id, assignment_id))\n\t\t\tdispatch(fetchSlots())\n\t\t}\n\t\tcatch (err) {\n\t\t\tdispatch({\n\t\t\t\ttype: RECEIVE_LEARN_FAILURE,\n\t\t\t\terror: Error(err)\n\t\t\t})\n\t\t}\n\t}\n}\n\n/*\n@params: user_id, set_id, assignment_id, mode\n@purpose: to GET the sequences for given user, set and send most recent/new to redux store\n*/\nexport const REQUEST_SEQUENCE = 'REQUEST_SEQUENCE';\nexport const RECEIVE_SEQUENCE_SUCCESS = 'RECEIVE_SEQUENCE_SUCCESS';\nexport const RECEIVE_SEQUENCE_FAILURE = 'RECEIVE_SEQUENCE_FAILURE';\nfunction requestSequence() {\t\t\n\treturn {\n\t\ttype: REQUEST_SEQUENCE\n\t}\n}\nexport function fetchSequence(user_id, set_id, assignment_id, mode) {\n\treturn (dispatch, getState) => {\n\t\tdispatch(requestSequence())\n\t\tlet sequences;\n\t\taxios.get(`${api_url}/sequences/?user_id=${Number(user_id)}&set_id=${Number(set_id)}`)\n\t\t.then(res => {\n\t\t\tsequences = res.data.sequences\n\t\t\tconst sorted_sequences = sequences.sort((s1, s2) => {\n\t\t\t\t\treturn new Date(s2.creation) - new Date(s1.creation)\n\t\t\t}),\n\t\t\tsequence = sorted_sequences[0]\n\t\t\tif(!sequence.completed) {\n\t\t\t\tdispatch({type: RECEIVE_SEQUENCE_SUCCESS, sequence})\n\n\t\t\t} else {\n\t\t\t\tlet sequence = { type: 'noprior' }\n\t\t\t\tdispatch(newSequence(sequence, user_id, set_id, assignment_id))\n\t\t\t}\n\t\t}).catch(err => {\n\t\t\tdispatch({\n\t\t\t\ttype: RECEIVE_SEQUENCE_FAILURE,\n\t\t\t\terror: Error(err)\n\t\t\t}) \n\t\t})\n\t\t\t\t\t\n\t}\n}\n\n/*\n@params: user_id, set_id, assignment_id, mode, format, timing, difficulty, adapation, chances, loop, reverse_cue, difficulty_chosen_by_user\n@purpose: send a POST request to create a new sequence. On the response, it will also have the necessary slots. Will be able to dispatch receive slots success.\n*/\nexport const NEW_SEQUENCE_FAILURE = 'NEW_SEQUENCE_FAILURE';\nvar _default_sequence = {\n\tuser_id: null,\n\tset_id: null,\n\tassignment_id: null,\n\tmode: 'learn',\n\tformat: 'recall',\n\ttiming: 'off',\n\tdifficulty: 'intermediate',\n\tadapation: true,\n\tchances: true,\n\tloop: true,\n\treverse_cue: false,\n\tdifficulty_chosen_by_user: false\n}\nexport function newSequence(prevsequence, user_id, set_id, assignment_id) {\n\treturn (dispatch, getState) => {\n\t\tdispatch({type: REQUEST_LEARN})\n\t\tlet new_sequence,\n\t\t\tcurrent_sequence = getState().learn.current_sequence;\n\t\tif(prevsequence == null) {\n\t\t\tnew_sequence = Object.assign({..._default_sequence}, {\n\t\t\t\tuser_id: current_sequence.user_id,\n\t\t\t\tset_id: current_sequence.set_id,\n\t\t\t\tassignment_id: current_sequence.assignment_id !== undefined ? current_sequence.assignment_id : null\n\t\t\t})\n\t\t} else {\n\t\t\tif(prevsequence.type == 'noprior') {\n\t\t\t\tnew_sequence = Object.assign({..._default_sequence}, {\n\t\t\t\t\tuser_id: user_id,\n\t\t\t\t\tset_id: set_id,\n\t\t\t\t\tassignment_id: assignment_id !== undefined ? assignment_id : null\n\t\t\t\t})\n\t\t\t} else if(prevsequence.type == 'completed') {\n\t\t\t\tnew_sequence = Object.assign({..._default_sequence}, {\n\t\t\t\t\tuser_id: prevsequence.user_id,\n\t\t\t\t\tset_id: prevsequence.set_id,\n\t\t\t\t\tassignment_id: prevsequence.assignment_id !== undefined ? prevsequence.assignment_id : null\n\t\t\t\t})\n\t\t\t} \n\t\t}\n\t\tvar sequence_id, sequence;\n\t\trequest\n\t\t.post(`${api_url}/sequences/no-slots/`)\n\t\t.send(new_sequence)\n\t\t.end(function (err, res) {\n\t\t\tif(res.ok) {\n\t\t\t\tsequence = res.body;\n\t\t\t\tsequence_id = res.body.id\t\n\t\t\t\tdispatch({type: RECEIVE_SEQUENCE_SUCCESS, sequence})\n\t\t\t\trequest\n\t\t\t\t.post(`${api_url}/sequences/${sequence_id}/slots/`)\n\t\t\t\t.timeout(150)\n\t\t\t\t.end(function(err, res) {\n\t\t\t\t\tif(res.ok) dispatch({type: CREATE_SLOTS_SUCCESS})\n\t\t\t\t\telse console.log('timedout')\n\t\t\t\t})\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tdispatch(fetchSlots())\n\t\t\t\t}, 50)\n\t\t\t} else {\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: NEW_SEQUENCE_FAILURE,\n\t\t\t\t\terror: Error(err)\n\t\t\t\t})\n\t\t\t}\n\t\t})\n\t}\n}\n\n\n/*\n@params: sequence_id, position, compelted, abandoned, mode, format, timing, difficulty, adapation, chances, loop, reverse_cue, difficulty_chosen_by_user\n@purpose: send a PUT request to the sequence id, most often updating the position and if the sequence was completed\n*/\nexport const UPDATE_SEQUENCE = 'UPDATE_SEQUENCE';\nexport const UPDATE_SEQUENCE_SUCCESS = 'UPDATE_SEQUENCE_SUCCESS';\nexport const UPDATE_SEQUENCE_FAILURE = 'UPDATE_SEQUENCE_FAILURE';\nfunction willUpdateSequence() {\n\treturn {\n\t\ttype: UPDATE_SEQUENCE\n\t}\n}\nexport function updateSequence(_sequence) {\n\treturn async(dispatch, getState) => {\n\t\tdispatch(willUpdateSequence())\n\t\ttry {\n\t\t\tlet updated_sequence;\n\t\t\t\n\t\t\tupdated_sequence = _sequence;\n\t\t\t\n\t\t\tfor (var _seqprop in updated_sequence) {\n\t\t\t\tif (_seqprop == 'type') {\n\t\t\t\t\tdelete updated_sequence[_seqprop]\n\t\t\t\t}\n\t\t\t}\n\t\t\tdispatch({type: UPDATING_STATE})\n\t\t\tawait axios.put(`${api_url}/sequences/${_sequence.id}`, \n\t\t\t\tupdated_sequence\n\t\t\t).then(res => {\n\t\t\t\tconsole.log(res)\n\t\t\t\tconst sequence = res.data;\n\t\t\t\tdispatch({type: UPDATE_SEQUENCE_SUCCESS, sequence}) \n\t\t\t\tif(sequence.completed) {\n\t\t\t\t\tdispatch({type: SHOW_COMPLETED_SEQUENCE})\n\t\t\t\t} \n\t\t\t}).then(() => {\n\t\t\t\tif(!getState().learn.current_sequence.completed) {\n\t\t\t\t\tlet slot = getState().learn.current_slot\n\t\t\t\t\tdispatch(fetchTrials())\n\t\t\t\t\tdispatch({ type: UPDATE_CURRENT_ROUND, slot })\n\t\t\t\t} \n\t\t\t})\n\t\t} catch(err) {\n\t\t\tdispatch({\n\t\t\t\ttype: UPDATE_SEQUENCE_FAILURE,\n\t\t\t\terror: Error(err)\n\t\t\t})\n\t\t}\n\t}\n}\n\n/*\n@params: sequence_id\n@purpose: send a GET request to collect the list of slots. include checker methods to make sure all haven't been completed.\n*/\n\nexport const CREATE_SLOTS = 'CREATE_SLOTS';\nexport const CREATE_SLOTS_SUCCESS = 'CREATE_SLOTS_SUCCESS';\nexport const CREATE_SLOTS_FAILURE = 'CREATE_SLOTS_FAILURE';\n\nexport const REQUEST_SLOTS = 'REQUEST_SLOTS';\nexport const RECEIVE_SLOTS_SUCCESS = 'RECEIVE_SLOTS_SUCCESS';\nexport const RECEIVE_SLOTS_FAILURE = 'RECEIVE_SLOTS_FAILURE';\nexport function fetchSlots(sequence_id, isPreparing) {\n\treturn (dispatch, getState) => {\n\t\tdispatch({type: REQUEST_SLOTS})\n\t\tvar slots, start, end, seq_id, round;\n\t\tif(sequence_id == undefined) {\n\t\t\tseq_id = getState().learn.current_sequence.id;\n\t\t\tif(seq_id == undefined) {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tdispatch(fetchSlots())\n\t\t\t\t}, 150)\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else {\n\t\t\tseq_id = sequence_id\n\t\t}\n\t\tlet pos = getState().learn.position,\n\t\t\tcurrent_round = getState().learn.current_round,\n\t\t\tlength = getState().learn.sequence_length;\n\n\t\tstart = Math.round(Math.floor((pos - 1)/5)) * 5,\n\t\tend = start + 5;\n\n\t\tround = start !== 0 ? Math.round((length/5) / (length/end)) : 1\n\n\t\tlet body;\n\t\trequest\n\t    .get(`${api_url}/sequences/${seq_id}/slots/?start=${start}&end=${end}`)\n\t    .end(function(err, res){\n\t   \t\tif(res.ok) {\n\t   \t\t\tslots = res.body.slots\n\t   \t\t\tbody = res.body;\n\t   \t\t\tif(slots.length === 0) {\n\t   \t\t\t\tsetTimeout(() => {\n\t   \t\t\t\t\tdispatch(fetchSlots(seq_id))\n\t   \t\t\t\t}, 150)\n\t   \t\t\t\treturn;\n\t   \t\t\t}\n\t   \t\t\tdispatch({type: RECEIVE_SLOTS_SUCCESS, slots, start, end, round})\n\t   \t\t\tif(!isPreparing) {\n\t   \t\t\t\tdispatch(fetchTrials())\n\t   \t\t\t}\n\t   \t\t} else {\n\t   \t\t\tdispatch({\n\t   \t\t\t\ttype: RECEIVE_SLOTS_FAILURE,\n\t   \t\t\t\terror: Error(err)\n\t   \t\t\t})\n\t   \t\t}\n\t   });\t\n\t}\n}\n\n/*\n@params: slot_id, completed, abandoned, format, reverse_cue, click_to_answer, flagged, hide\n@purpose: send a PUT request to the slot_id, most often saying that it has been completed or changing the format\n*/\nexport const UPDATE_SLOT = 'UPDATE_SLOT'\nexport const UPDATE_SLOT_SUCCESS = 'UPDATE_SLOT_SUCCESS'\nexport const UPDATE_SLOT_FAILURE = 'UPDATE_SLOT_FAILURE'\nexport function updateSlot(slot) {\n\treturn async(dispatch, getState) => {\n\t\tdispatch({type: UPDATE_SLOT})\n\t\ttry {\n\t\t\tawait axios.put(`${api_url}/slots/${slot.id}`, \n\t\t\t\tslot\n\t\t\t).then(res => {\n\t\t\t\tlet slot = res.data;\n\t\t\t\tdispatch({type: UPDATE_SLOT_SUCCESS, slot})\n\t\t\t}).then(() => {\n\t\t\t\tif(getState().learn.slots.filter(slot => !slot.completed).length === 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tlet slot = getState().learn.current_slot\n\t\t\t\tdispatch({ type: UPDATE_CURRENT_ROUND, slot })\n\t\t\t})\t\t\t\n\t\t} catch(err) {\n\t\t\tdispatch({\n\t\t\t\ttype: UPDATE_SLOT_FAILURE,\n\t\t\t\terror: Error(err)\n\t\t\t})\n\t\t}\n\t}\n}\n\n/*\n@params: \n@purpose: send action to store that tells it to transform list of slots into 5 item groups\n*/\nexport const TRANSFORM_5_SLOTS = 'TRANSFORM_5_SLOTS' // a few methods to set multiple arrays\nexport const COMPLETED_5_SLOTS = 'COMPLETED_5_SLOTS' // for display purposes \nexport function transformSlots() {\n\treturn {\n\t\ttype: TRANSFORM_5_SLOTS\n\t}\n}\nexport function completed5Slots() {\n\treturn {\n\t\ttype: COMPLETED_5_SLOTS\n\t}\n}\n\n/*\n@params: slot_id\n@purpose: send a GET request to collect list of trials. will be used to send to redux store, which will then be read by the new trial function to determine what to send. \n*/\nexport const REQUEST_TRIALS = 'REQUEST_TRIALS';\nexport const RECEIVE_TRIALS_SUCCESS = 'RECEIVE_TRIALS_SUCCESS';\nexport const RECEIVE_TRIALS_FAILURE = 'RECEIVE_TRIALS_FAILURE';\nexport function fetchTrials() {\n\treturn (dispatch, getState) => {\n\t\tdispatch({type: REQUEST_TRIALS})\n\t\tlet slot = getState().learn.current_slot,\n\t\t\tslot_id,\n\t\t\ttrial = {},\n\t\t\ttrials;\n\t\tif(Object.keys(slot).length == 0) {\n\t\t\tsetTimeout(() => {\n\t\t\t\tdispatch(fetchTrials())\n\t\t\t}, 25)\n\t\t\treturn;\n\t\t}\n\t\tslot_id = slot.id;\n\t\taxios.get(`${api_url}/slots/${slot_id}/trials/`)\n\t\t.then(res => { \n\t\t\ttrials = res.data.trials\n\t\t\tif(trials !== undefined && trials.length > 0) {\n\t\t\t\tdispatch({type: RECEIVE_TRIALS_SUCCESS, trials})\n\t\t\t\ttrial = trials.slice(-1)[0]\n\t\t\t\tif(trial.accuracy === 1 && slot.completed) {\n\t\t\t\t\tdispatch({type: SHOW_CORRECT})\n\t\t\t\t\tdispatch({type: RECEIVE_LEARN_SUCCESS})\n\t\t\t\t} else {\n\t\t\t\t\ttrial['type'] = 'return';\n\t\t\t\t\tdispatch(newTrial(trial))\t\t\t\t\t\t\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(!slot.completed) {\n\t\t\t\ttrial['type'] = null;\n\t\t\t\tdispatch(newTrial(trial))\n\t\t\t}\n\t\t})\n\t\t.catch(err => {\n\t\t\tdispatch({\n\t\t\t\ttype: RECEIVE_TRIALS_FAILURE,\n\t\t\t\terror: Error(err)\n\t\t\t})\n\t\t})\n\t}\n}\n\n/*\n@params: slot_id, cue_visible, image, correct_index_choice, nonde,\ntruefalse, all_of_the_above, format, click_to_answer, type_index_to_answer, cue_target_reversal, reverse_truefalse, reverse_mc, format_chosen_by_user, help_chosen_by_user,\nsubject, synonyms, augs, related_terms, nonemc_choices, mc_choices, truefalse_target_shown, stem, alt_cues, start\n@purpose: send a POST request to create a new trial. will need to use state of slot and previous trial (if any) to determine the displayed augs/format and cue\n*/\nexport const NEW_TRIAL = 'NEW_TRIAL';\nexport const NEW_TRIAL_SUCCESS = 'NEW_TRIAL_SUCCESS';\nexport const NEW_TRIAL_FAILURE = 'NEW_TRIAL_FAILURE';\nvar _default_trial = {\n\tslot_id: 0,\n\tcue_visible: '',\n\timage: '',\n\tcorrect_index_choice: '',\n\tnone: false,\n\ttruefalse: false,\n\tall_of_the_above: false, \n\tformat: '', \n\tclick_to_answer: false,\n\ttype_index_to_answer: false,\n\tcue_target_reversal: false,\n\treverse_truefalse: false,\n\treverse_mc: false,\n\tformat_chosen_by_user: false,\n\thelp_chosen_by_user: false,\n\tsubjects: null,\n\tsynonyms: null,\n\taugs: null,\n\trelated_terms: null,\n\tnonemc_choices: null,\n\tmc_choices: null,\n\ttruefalse_target_shown: null,\n\tstem: null,\n\talt_cues: null,\n\tstart: null\n}\nexport function newTrial(trial) {\n\treturn (dispatch, getState) => {\n\t\tdispatch({type: NEW_TRIAL})\n\t\tlet new_trial,\n\t\t\tstate = getState().learn,\n\t\t\tcurrent_slot = state.current_slot,\n\t\t\tlast_trial = state.trials.slice(-1)[0],\n\t\t\ts = new Date(),\n\t\t  \tstart = s.toISOString().replace(\"T\", \" \").replace(\"Z\", \"\");\n\t\tif(current_slot.completed) {\n\t\t\treturn;\n\t\t}\n\t\tfor(var _trialprop in trial) {\n\t\t\tif(trial[_trialprop] instanceof Array) {\n\t\t\t\ttrial[_trialprop] = trial[_trialprop].join(\"|\")\n\t\t\t}\n\t\t}\n\t\tif (trial.type == 'return') {\n\t\t\tnew_trial = trial\n\t\t} else if (trial.type == null) {\n\t\t\tnew_trial = Object.assign({..._default_trial}, {\n\t\t\t\tslot_id: current_slot.id,\n\t\t\t\tcue_visible: current_slot['item']['cue'],\n\t\t\t\tformat: 'recall',\n\t\t\t\tstart: start\n\t\t\t})\n\t\t} else if (trial.type == 'adapt') {\n\t\t\tnew_trial = Object.assign({..._default_trial}, {\n\t\t\t\tslot_id: current_slot.id,\n\t\t\t\tcue_visible: trial.cue_visible,\n\t\t\t\tformat: trial.format,\n\t\t\t\tmc_choices: trial.mc_choices || null,\n\t\t\t\tstem: trial.stem || null,\n\t\t\t\tstart: start\n\t\t\t})\n\t\t} else if (trial.type == 'hint') {\n\t\t\tnew_trial = Object.assign({...trial}, {\n\t\t\t\thelp_chosen_by_user: true,\n\t\t\t\taugs: trial.new_aug,\n\t\t\t\tstart: start\n\t\t\t})\n\t\t}\n\t\tfor(var _prop in new_trial) {\n\t\t\tif (_prop == 'type') {\n\t\t\t\tdelete new_trial[_prop]\n\t\t\t}\n\t\t}\n\t\taxios.post(`${api_url}/trials/`, \n\t\t\tnew_trial\n\t\t).then(res => {\n\t\t\tlet _trial = res.data;\n\t\t\tdispatch({type: NEW_TRIAL_SUCCESS, _trial})\n\t\t})\n\t\t.catch((err) => {\n\t\t\tdispatch({\n\t\t\t\ttype: NEW_TRIAL_FAILURE,\n\t\t\t\terrorObj: err,\n\t\t\t\terror: Error(err)\n\t\t\t})\n\t\t})\n\t}\n}\n\n/* Helper for format / diff settings */\nexport const CHANGE_FORMAT = 'CHANGE_FORMAT';\nexport const CHANGE_FORMAT_ERROR = 'CHANGE_FORMAT_ERROR';\n\nexport function newFormat(last_trial, state) {\n\treturn (dispatch, getState) => {\n\t\ttry {\n\t\t\tlet working_obj,\n\t\t\t\tcurrent_slot = state.learn.current_slot;\n\t\t\tif(last_trial !== null) {\n\t\t\t\tworking_obj = last_trial;\n\t\t\t} else {\n\t\t\t\tworking_obj = current_slot;\n\t\t\t}\n\t\t\tlet all_formats = ['gen', 'trans', 'recall', 'nonemc', 'mc', 'truefalse', 'stem', 'peek', 'copy'],\n\t\t\t\tcurrent_formats = ['recall', 'mc', 'stem', 'copy'],\n\t\t\t\tcurrent_index = current_formats.indexOf(working_obj['format']),\n\t\t\t\tnext_index = current_index + 1;\n\t\t\tif (next_index >= 3) {\n\t\t\t\tnext_index = 3\n\t\t\t}\n\t\t\tconst new_format = current_formats[next_index];\n\t\t\tdispatch({type: CHANGE_FORMAT, new_format})\n\t\t\t\n\t\t\treturn new_format;\n\t\t} catch(err) {\n\t\t\tdispatch({\n\t\t\t\ttype: CHANGE_FORMAT_ERROR,\n\t\t\t\terror: Error(err)\n\t\t\t})\n\t\t}\n\t}\n}\n\n\n/* Helper for deciding which hint to show next */\nexport const NEW_HINT = 'NEW_HINT';\nexport const NEW_HINT_SUCCESS = 'NEW_HINT_SUCCESS';\nexport const NEW_HINT_FAILURE = 'NEW_HINT_FAILURE';\nexport function hint(response) {\n\treturn (dispatch, getState) => {\n\t\tdispatch({type: NEW_HINT})\n\t\tlet current_trial = getState().learn.current_trial,\n\t\t\tid = current_trial.id,\n\t\t\tcurrent_slot = getState().learn.current_slot,\n\t\t\taugs = current_slot['augs'],\n\t\t\trecent_aug = current_trial.augs ? current_trial['augs'][0] : null,\n\t\t\tindex = recent_aug !== null ? augs.indexOf(recent_aug) : 0,\n\t\t\tnext_index = index + 1;\n\t\taxios.put(`${api_url}/trials/${id}`, \n\t\t\tresponse\n\t\t).then((res) => {\n\t\t\tlet updated_trial = res.data;\n\t\t\tdispatch({type: UPDATE_TRIAL_SUCCESS, updated_trial})\n\t\t\tif (next_index >= augs.length) {\n\t\t\t\tnext_index = augs.length;\n\t\t\t}\n\t\t\tif (augs.length > 0 && recent_aug == null) {\n\t\t\t\tnext_index = 0;\n\t\t\t}\n\t\t\tlet new_aug = augs[next_index]\n\t\t\tcurrent_trial['new_aug'] = new_aug;\n\t\t\tcurrent_trial['type'] = 'hint';\n\t\t\tdispatch(newTrial(current_trial))\n\t\t\tdispatch({type: NEW_HINT_SUCCESS, new_aug})\n\t\t})\n\t\t.catch(() => {\n\t\t\tdispatch({\n\t\t\t\ttype: NEW_HINT_FAILURE,\n\t\t\t\terror: Error(err)\n\t\t\t})\n\t\t})\n\t}\n}\n\n\n/*\n@params: \n@purpose: update the current trial, and either create new trial w/adapt or show correct\n*/\nexport const UPDATE_TRIAL = 'UPDATE_TRIAL';\nexport const UPDATE_TRIAL_SUCCESS = 'UPDATE_TRIAL_SUCCESS';\nexport const UPDATE_TRIAL_FAILURE = 'UPDATE_TRIAL_FAILURE';\nexport const GRADING = 'GRADING';\nfunction willUpdateTrial() {\n\treturn {\n\t\ttype: UPDATE_TRIAL\n\t}\n}\nexport function updateTrial(response) {  \n\treturn (dispatch, getState) => {\n\t\tdispatch({type: GRADING})\n\t\tlet state = getState().learn,\n\t\t\tcurrent_trial = state.current_trial,\n\t\t\tcurrent_slot = state.current_slot,\n\t\t\ttrial_id = current_trial.id;\n\t\taxios.put(`${api_url}/trials/${trial_id}`, \n\t\t\tresponse\n\t\t).then(res => {\n\t\t\tlet updated_trial = res.data;\n\t\t\tdispatch({type: UPDATE_TRIAL_SUCCESS, updated_trial})\n\t\t\tif(updated_trial.correct) {\n\t\t\t\tcurrent_slot['completed'] = true;\n\t\t\t\tdispatch(updateSlot(current_slot))\n\t\t\t\tdispatch({type: SHOW_CORRECT})\n\t\t\t\treturn;\n\t\t\t} \n\t\t\tdispatch(adapt(updated_trial))\n\t\t})\n\t\t.catch(() => {\n\t\t\tdispatch({\n\t\t\ttype: UPDATE_TRIAL_FAILURE,\n\t\t\terror: Error(err),\n\t\t\ttypeerror: err\n\t\t\t})\n\t\t})\n\t}\n}\n\n\n/*\n@params: \n@purpose: take the current state of learn and return a new trial with updated settings\n*/\nexport const ADAPT = 'ADAPT';\nexport const ADAPT_SUCCESS = 'ADAPT_SUCCESS';\nexport const ADAPT_FAILURE = 'ADAPT_FAILURE';\nexport function adapt(updated_trial) {\n\treturn (dispatch, getState) => {\n\t\tdispatch({type: ADAPT})\n\t\ttry {\n\t\t\tlet new_format = dispatch(newFormat(updated_trial, getState())),\n\t\t\t\tcurrent_slot = getState().learn.current_slot,\n\t\t\t\tadapt_trial,\n\t\t\t\tmc_choices,\n\t\t\t\trequest_choices,\n\t\t\t\trequest_stem,\n\t\t\t\tstem;\n\t\t\tif(new_format == 'mc') {\n\t\t\t\tmc_choices = current_slot['mc']\n\t\t\t\trequest_choices = mc_choices.join('|')\n\t\t\t} else if (new_format == 'stem') {\n\t\t\t\tstem = current_slot['stem']\n\t\t\t\trequest_stem = stem.join(\"|\")\n\t\t\t}\n\t\t\tupdated_trial = Object.assign({...updated_trial}, {\n\t\t\t\ttype: 'adapt',\n\t\t\t\tformat: new_format,\n\t\t\t\tmc_choices: request_choices !== undefined ? request_choices : null,\n\t\t\t\tstem: request_stem !== undefined ? request_stem : null\n\t\t\t})\n\t\t\tdispatch({type: ADAPT_SUCCESS, new_format})\n\t\t\tdispatch(newTrial(updated_trial))\n\t\t\tif(current_slot.format !== new_format) {\n\t\t\t\tcurrent_slot['format'] = new_format;\n\t\t\t\tdispatch(updateSlot(current_slot))\n\t\t\t}\n\t\t} catch(err) {\n\t\t\tdispatch({\n\t\t\t\ttype: ADAPT_FAILURE,\n\t\t\t\terror: Error(err)\n\t\t\t})\n\t\t}\n\t}\n}\n\n// export const SHOW_FEEDBACK = 'SHOW_FEEDBACK'\n\n\n/*\n@params:\n@purpose: dispatch to store to update view to show correct view\n*/\nexport const SHOW_CORRECT = 'SHOW_CORRECT';\n// export function showCorrect() {\n// \treturn {\n// \t\ttype: SHOW_CORRECT\n// \t}\n// }\n\n\n/*\n@params:\n@purpose: dispatch to store to update view to show completed sequence (full)\n*/\nexport const SHOW_COMPLETED_SEQUENCE = 'SHOW_COMPLETED_SEQUENCE';\n// export function showCompletedSequence() {\n// \treturn {\n// \t\ttype: SHOW_COMPLETED_SEQUENCE\n// \t}\n// }\n\n\n/*\n@params:\n@purpose: with current index, find the unfinished slots, and move to that spot[/order]\n*/\nexport const SKIP_SUCCESS = 'SKIP_SUCCESS';\nexport const SKIP_FAILURE = 'SKIP_FAILURE';\nfunction findUnfinished(index, length, slots) {\n\tfor(var _u = index; _u < length; _u++) {\n\t\tif (!slots[_u]['completed']) {\n\t\t\treturn _u;\n\t\t}\n\t}\n}\nfunction skipToUnfinished(index, slots) {\n\tlet length = slots.length;\n\tif (Number(index) == Number(length)) {\t\t\n\t\tindex = findUnfinished(0, length, slots)\n\t} else {\n\t\tindex = findUnfinished(index, length, slots)\n\t\tif(index == undefined) {\n\t\t\tindex = findUnfinished(0, length, slots)\n\t\t}\n\t}\n\treturn index;\n}\nexport function skipSlot() {\n\treturn (dispatch, getState) => {\n\t\ttry {\n\t\t\tlet state = getState().learn,\n\t\t\t\tcurrent_slot = state.current_slot,\n\t\t\t\tcurrent_sequence = state.current_sequence,\n\t\t\t\tslots = state.current_round,\n\t\t\t\tindex = state.slot_index,\n\t\t\t\tnew_index = skipToUnfinished(index, slots);\n\t\t\tif(new_index == undefined) {\n\t\t\t\tdispatch(showCompleteRound(current_sequence.id))\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlet\tnext_slot = slots[new_index],\n\t\t\t\tnew_pos = next_slot.order;\t\n\t\t\tdispatch({type: SKIP_SUCCESS, next_slot})\n\t\t\tif(next_slot.completed) {\n\t\t\t\tdispatch({type: SHOW_CORRECT})\n\t\t\t}\n\t\t\tcurrent_sequence = Object.assign({...current_sequence}, {\n\t\t\t\tposition: new_pos,\n\t\t\t\ttype: 'updating_position'\n\t\t\t})\n\t\t\tdispatch(updateSequence(current_sequence))\n\t\t} catch(err) { \n\t\t\tdispatch({\n\t\t\t\ttype: SKIP_FAILURE,\n\t\t\t\terror: Error(err)\n\t\t\t})\n\t\t}\n\t}\n}\n\n\n/*\n@params: \n@purpose: to move to the next slot. if the next slot is equal to the last order # or 1, just return\n*/\nexport const MOVE_SLOT = 'MOVE_SLOT'\nexport const MOVE_SLOT_SUCCESS = 'MOVE_SLOT_SUCCESS'\nexport const MOVE_SLOT_FAILURE = 'MOVE_SLOT_FAILURE'\nfunction findNext(dir, slots, pos) {\n\tlet length = slots.length - 1;\n\tif(dir == 'next') {\n\t\tif(pos == length) {\n\t\t\treturn pos;\n\t\t}\n\t\treturn pos + 1;\n\t}\n\tif (dir == 'prev') {\n\t\tif (pos == 0) {\n\t\t\treturn pos;\n\t\t}\n\t\treturn pos - 1;\n\t}\t\t\t\n}\nexport function nextSlot(dir) {\n\treturn (dispatch, getState) => {\n\t\ttry {\n\t\t\tlet state = getState().learn,\n\t\t\t\tcurrent_slot = state.current_slot,\n\t\t\t\tcurrent_sequence = state.current_sequence,\n\t\t\t\tslots = state.current_round,\n\t\t\t\tpos = state.slot_index,\n\t\t\t\tnext_pos = findNext(dir, slots, pos),\t\t\n\t\t\t\tnext_slot = slots[next_pos],\n\t\t\t\tnew_pos = next_slot.order;\n\t\t\tif(pos == next_pos) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdispatch({type: MOVE_SLOT_SUCCESS, next_slot})\n\t\t\tif(next_slot.completed) {\n\t\t\t\tdispatch({type: SHOW_CORRECT})\n\t\t\t}\n\t\t\tcurrent_sequence = Object.assign({...current_sequence}, {\n\t\t\t\tposition: new_pos,\n\t\t\t\ttype: 'updating_position'\n\t\t\t})\n\t\t\tdispatch(updateSequence(current_sequence))\n\t\t} catch(err) {\n\t\t\tdispatch({\n\t\t\t\ttype: MOVE_SLOT_FAILURE,\n\t\t\t\terror: Error(err)\n\t\t\t})\n\t\t}\n\t}\n}\n\n\n/*\n@params:\n@purpose: to clear the learn state for viewing/rendering\n*/\nexport const CLEAR_LEARN = 'CLEAR_LEARN'\nexport function clearLearn() {\n\treturn {\n\t\ttype: CLEAR_LEARN\n\t}\n}\n\nexport const SHOW_COMPLETE_ROUND = 'SHOW_COMPLETE_ROUND';\nexport const NEXT_ROUND = 'NEXT_ROUND';\nexport function showCompleteRound(seq_id) {\n\treturn (dispatch, getState) => {\n\t\tdispatch({ type: SHOW_COMPLETE_ROUND })\n\t\tsetTimeout(() => {\n\t\t\tlet current_sequence = getState().learn.current_sequence,\n\t\t\t\tpos = getState().learn.position,\n\t\t\t\tlength = getState().learn.sequence_length;\n\t\t\tif(pos >= length) return;\n\t\t\tdispatch(fetchSlots(current_sequence.id, true))\n\t\t}, 50)\n\t}\n}\nexport function nextRound() {\n\treturn (dispatch, getState) => {\n\t\tlet isFetchingSlots = getState().learn.isFetchingSlots;\n\t\tif(isFetchingSlots) {\n\t\t\tsetTimeout(() => {\n\t\t\t\tdispatch(nextRound())\n\t\t\t}, 50)\n\t\t}\n\t\tdispatch({type: NEXT_ROUND})\n\t\tlet\tnew_position = getState().learn.position,\n\t\t\tcurrent_sequence = getState().learn.current_sequence,\n\t\t\tsequence;\n\t\tif(new_position >= current_sequence.length) {\n\t\t\tsequence = Object.assign({...current_sequence}, {completed: true, type: 'completed'})\n\t\t} else {\n\t\t\tsequence = Object.assign({...current_sequence}, {position: new_position, type: 'updating_position'})\n\t\t}\n\t\tdispatch(updateSequence(sequence))\n\t}\n}\n\nexport const UPDATING_STATE = 'UPDATING_STATE';\nexport const UPDATE_CURRENT_ROUND = 'UPDATE_CURRENT_ROUND'\n\n\n/* Show completed round or sequence */\n\n// .then(() => {\n// \tvar state = getState().learn,\n// \t\tslots = state.slots,\n// \t\tcurrent_sequence = state.current_sequence,\n// \t\tcurrent_round = state.current_round,\n// \t\tcmi = state.current_round_index,\n// \t\trounds = state.rounds,\n// \t\tround_slots = current_round;\n// \tif(slots.filter(slot => !slot.completed).length === 0) {\n// \t\tcurrent_sequence['type'] = 'completed';\n// \t\tdispatch(updateSequence(current_sequence))\n// \t\treturn;\n// \t}\n// \tif(!current_sequence.completed && current_sequence.type !== 'completed') {\n// \t\tif(round_slots.filter(slot => !slot.completed).length === 0) {\n// \t\t\trounds.map((miniseq) => {\n// \t\t\t\tif(rounds.indexOf(miniseq) == cmi) {\n// \t\t\t\t\tminiseq.completed = true\n// \t\t\t\t}\n// \t\t\t})\n// \t\t\tdispatch({type: SHOW_COMPLETE_MINISEQ, rounds})\n// \t\t}\n// \t}\n// })\n\n\n\n"]}