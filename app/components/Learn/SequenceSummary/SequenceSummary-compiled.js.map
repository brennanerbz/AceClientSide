{"version":3,"sources":["SequenceSummary.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,OAAO,CAAC,mCAAmC,CAAC,CAAC;;IAExB,eAAe;WAAf,eAAe;;UAAf,eAAe;;;;;;cAAf,eAAe;;SAI7B,kBAAG;;;OACA,KAAK,GAAK,IAAI,CAAC,KAAK,CAApB,KAAK;;AACb,UAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;AAClB,UACC;;MAAK,SAAS,EAAC,SAAS;IACvB;;OAAI,SAAS,EAAC,gBAAgB;;KAAsB;IACpD;;OAAO,SAAS,EAAC,eAAe;KAC/B;;;MACC;;SAAI,SAAS,EAAC,YAAY;OACzB;;UAAI,SAAS,EAAC,kBAAkB;;QAE3B;OACL;;UAAI,SAAS,EAAC,OAAO;QACnB,KAAK,CAAC,MAAM,CAAC,UAAA,IAAI;gBAAI,IAAI,CAAC,MAAM,IAAI,QAAQ;SAAA,CAAC,CAAC,MAAM;;QAAK,KAAK,CAAC,MAAM;QAClE;OACL;;UAAI,SAAS,EAAC,SAAS;QACrB,AAAC,KAAK,CAAC,MAAM,CAAC,UAAA,IAAI;gBAAI,IAAI,CAAC,MAAM,IAAI,QAAQ;SAAA,CAAC,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,GAAI,GAAG,GAAG,KAAK;;QAChF;OACD;MACL;;SAAI,SAAS,EAAC,QAAQ;OACrB;;UAAI,SAAS,EAAC,cAAc;;QAEvB;OACL;;UAAI,SAAS,EAAC,OAAO;QACnB,KAAK,CAAC,MAAM,CAAC,UAAA,IAAI;gBAAI,IAAI,CAAC,MAAM,IAAI,IAAI;SAAA,CAAC,CAAC,MAAM;;QAAK,KAAK,CAAC,MAAM;QAC9D;OACL;;UAAI,SAAS,EAAC,SAAS;QACrB,AAAC,KAAK,CAAC,MAAM,CAAC,UAAA,IAAI;gBAAI,IAAI,CAAC,MAAM,IAAI,IAAI;SAAA,CAAC,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,GAAI,GAAG,GAAG,KAAK;;QAC5E;OACD;MACL;;SAAI,SAAS,EAAC,QAAQ;OACrB;;UAAI,SAAS,EAAC,cAAc;;QAEvB;OACL;;UAAI,SAAS,EAAC,OAAO;QACnB,KAAK,CAAC,MAAM,CAAC,UAAA,IAAI;gBAAI,IAAI,CAAC,MAAM,IAAI,MAAM;SAAA,CAAC,CAAC,MAAM;;QAAK,KAAK,CAAC,MAAM;QAChE;OACL;;UAAI,SAAS,EAAC,SAAS;QACrB,AAAC,KAAK,CAAC,MAAM,CAAC,UAAA,IAAI;gBAAI,IAAI,CAAC,MAAM,IAAI,MAAM;SAAA,CAAC,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,GAAI,GAAG,GAAG,KAAK;;QAC9E;OACD;MACL;;SAAI,SAAS,EAAC,UAAU;OACvB;;UAAI,SAAS,EAAC,gBAAgB;;QAEzB;OACL;;UAAI,SAAS,EAAC,OAAO;QACnB,KAAK,CAAC,MAAM,CAAC,UAAA,IAAI;gBAAI,IAAI,CAAC,MAAM,IAAI,MAAM;SAAA,CAAC,CAAC,MAAM;;QAAK,KAAK,CAAC,MAAM;QAChE;OACL;;UAAI,SAAS,EAAC,SAAS;QACrB,AAAC,KAAK,CAAC,MAAM,CAAC,UAAA,IAAI;gBAAI,IAAI,CAAC,MAAM,IAAI,MAAM;SAAA,CAAC,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,GAAI,GAAG,GAAG,KAAK;;QAC9E;OACD;MACE;KACD;IACR;;OAAQ,SAAS,EAAC,uBAAuB;AACvC,aAAO,EAAE;cAAM,MAAK,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC;OAAA,AAAC;;KACjB;IACxB,CACL;GACF;;;SA9DkB,EAClB;;;;wBAFmB,eAAe;AAAf,gBAAe,uCAAf,eAAe,KAAf,eAAe;QAAf,eAAe;;;qBAAf,eAAe","file":"SequenceSummary-compiled.js","sourcesContent":["import React, { Component, PropTypes } from 'react';\nrequire('../RoundSummary/RoundSummary.scss');\n\nexport default class SequenceSummary extends Component {\n\tstatic propTypes = {\n\t}\n\n\trender() {\n\t\tconst { slots } = this.props;\n\t\tconsole.log(slots)\n\t\treturn(\n\t\t\t<div className=\"summary\">\n\t\t\t\t<h3 className=\"summary_header\">Overall Progress</h3>\n\t\t\t\t<table className=\"summary_table\">\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t<tr className=\"recall_row\">\n\t\t\t\t\t\t\t<td className=\"recall row_label\">\n\t\t\t\t\t\t\t\tDefine \n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t<td className=\"count\">\n\t\t\t\t\t\t\t\t{slots.filter(slot => slot.format == 'recall').length} / {slots.length} \n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t<td className=\"percent\">\n\t\t\t\t\t\t\t\t{(slots.filter(slot => slot.format == 'recall').length / slots.length) / 100 * 10000} % \n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t<tr className=\"mc_row\">\n\t\t\t\t\t\t\t<td className=\"mc row_label\">\n\t\t\t\t\t\t\t\tMultiple Choice\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t<td className=\"count\">\n\t\t\t\t\t\t\t\t{slots.filter(slot => slot.format == 'mc').length} / {slots.length} \n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t<td className=\"percent\">\n\t\t\t\t\t\t\t\t{(slots.filter(slot => slot.format == 'mc').length / slots.length) / 100 * 10000} % \n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t<tr className=\"fb_row\">\n\t\t\t\t\t\t\t<td className=\"fb row_label\">\n\t\t\t\t\t\t\t\t Fill in the Blank\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t<td className=\"count\">\n\t\t\t\t\t\t\t\t{slots.filter(slot => slot.format == 'stem').length} / {slots.length} \n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t<td className=\"percent\">\n\t\t\t\t\t\t\t\t{(slots.filter(slot => slot.format == 'stem').length / slots.length) / 100 * 10000} % \n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t<tr className=\"copy_row\">\n\t\t\t\t\t\t\t<td className=\"copy row_label\">\n\t\t\t\t\t\t\t\tCopy Answer\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t<td className=\"count\">\n\t\t\t\t\t\t\t\t{slots.filter(slot => slot.format == 'copy').length} / {slots.length} \n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t<td className=\"percent\">\n\t\t\t\t\t\t\t\t{(slots.filter(slot => slot.format == 'copy').length / slots.length) / 100 * 10000} % \n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t\t<button className=\"button button-primary\"\n\t\t\t\t\t\tonClick={() => this.props.newSequence(null)}>\n\t\t\t\t\t\tStart new sequence</button>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n\n\n\n"]}